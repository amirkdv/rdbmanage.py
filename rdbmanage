#!/usr/bin/env python
import os
import sys
import pwd
import time
import datetime
import argparse
import ConfigParser
import traceback
import subprocess
import shlex
import smtplib
import email.mime.text

_debug = 'RDBMANAGE_DEBUG' in os.environ

class Failure(Exception): pass
class RdbFailure(Failure): pass

class Job(object):
    def __init__(self, name, opts):
        self.name = str(name)
        self.opts = dict(opts)
        path = self.opts['dir']
        if os.path.isfile(path):
            self.fail('%s exists and is not empty' % path)
        if not os.path.exists(path):
            self._mkdir(path)

        if os.path.exists(os.path.join(path, 'rdiff-backup-data')):
            # populate self.incrs
            cmd = ['rdiff-backup', '-l', '--parsable-output', path]
            code, out, err = self._subp_cmd(cmd)
            if code:
                self.fail('Bad directory %s ? %s\n%s' % (path, out, err))
            else:
                lines = out.strip().split('\n')
                self.incrs = sorted([int(line.split(' ')[0]) for line in lines])
        else: # special case - job with no incrs; make sure dir is empty
            try:
                os.rmdir(path)
                self._mkdir(path)
                self.incrs = []
            except OSError as ex:
                if ex.errno == errno.ENOTEMPTY:
                    self.fail('%s exists and is not empty' % path)

    def _mkdir(self, path):
        # go through _subp_cmd so the user is set correctly
        code, out, err = self._subp_cmd(['mkdir', '-p', path])
        if code:
            self.fail('Failed to create directory %s: %s\n%s' % (path, out, err))


    # the prefered method of failing so they all get logged.
    def fail(self, message):
        message = str(message)
        tb = traceback.format_stack()
        self.log(message + ''.join(tb[:-1]) if tb else '')
        raise Failure(message)

    # logs to log file, if _debug to stderr too
    def log(self, message):
        message = str(message).strip() + '\n'
        # stderr needs job label, logfile needs timestamp
        if _debug:
            sys.stderr.write('[job: %s] %s' % (self.name, message))
        with open(self.opts['logs'], 'a+') as f:
            f.write('[%s] %s' % (_readable_date() ,message))

    # returns the number of revisions fetched (0 or 1). Raises a Failure in case
    # of error.
    def backup(self, force=False):
        latest = self.incrs[-1] if len(self.incrs) else -1
        age = int(time.time()) - latest
        max_age = float(self.opts['max_mirror_age']) * 3600
        msg = 'mirror is %.2f hrs old (max allowed: %.2f hrs)' % \
                (age/3600.00, max_age/3600)
        if age < max_age and not force:
            self.log(msg + ', nothing to do.\n')
            return 0

        self.log(msg + ', fetching new revision.\n')
        if self.opts['pre_backup_cmd']:
            self.log("pre-backup: %s" % self.opts['pre_backup_cmd'])
            # FIXME catch shlex.split exceptions
            cmd = shlex.split(self.opts['pre_backup_cmd'])
            code, out, err = self._subp_cmd(cmd)
            if code:
                msg = 'pre-backup failed: %s\n%s%s' % (' '.join(cmd), out, err)
                self.fail(msg)
                self.email(msg)

        self.log('starting backup: %s' % self.opts['backup_cmd'])
        # FIXME catch shlex.split exceptions
        cmd = shlex.split(self.opts['backup_cmd'])
        code, out, err = self._subp_cmd(cmd)
        if code:
            msg = 'backup failed: %s\n%s%s' % (' '.join(cmd), out, err)
            self.fail(msg)
            self.email(msg)
        return 1

    # removes old revisions as per conf and raises Failure in case of error.
    def clear(self):
        max_keep, n_incrs = int(self.opts['max_keep']), len(self.incrs)
        msg = 'There are %d revisions (max allowed: %d)' % (n_incrs, max_keep)
        if n_incrs <= max_keep:
            self.log(msg + ', nothing to clear.\n')
            return

        self.log(msg + ', clearing old revisions\n')
        threshold = str(self.incrs[n_incrs - max_keep] - 1)
        cmd = ['rdiff-backup', '--remove-older-than', threshold, '--force', self.opts['dir']]
        code, out, err = self._subp_cmd(cmd)
        if code:
            msg = 'failed to clear old revisions: %s\n%s%s' % (' '.join(cmd), out, err)
            self.fail(msg)
            self.email(msg)

    # runs the status_cmd (intended to be light sanity check), raises Failure in
    # case of error.
    def test(self):
        # FIXME catch shlex.split exceptions
        cmd = shlex.split(self.opts['status_cmd'])
        self.log('testing config and connection: %s' % ' '.join(cmd))
        code, out, err = self._subp_cmd(cmd)
        if code:
            self.fail('test failed (code: %d) saying: %s\n%s' %s (code, out, err))


    def email(self, msg):
        self.log('sending notification for job %s to %s' % \
                    (self.name, self.opts['email_to']))
        msg = email.mime.text.MIMEText(msg)
        msg['Subject'] = 'Notification from rdbmanage - job: %s' % self.name
        # FIXME catch smtplib exceptions:
        # SMTPHeloError, SMTPRecipientsRefused, SMTPSenderRefused, SMTPDataError
        srv = smtplib.SMTP(self.opts['smtp_server'], self.opts['smtp_port'])
        if self.opts['smtp_pass']:
            srv.ehlo()
            srv.starttls()
            srv.ehlo()
            srv.login(self.opts['smtp_user'], self.opts['smtp_pass'])
        srv.sendmail(self.opts['smtp_user'], self.opts['email_to'], msg.as_string())
        srv.close()

    # runs a command in a subprocess as the user of this job; returns a tuple:
    # (returncode, stdout, stderr).
    #
    # All arguments (except for preexec_fn, stdout, and stderr) are passed
    # untouched to Popen constructor.
    def _subp_cmd(self, args, **kwargs):
        # FIXME catch KeyError, user not found
        pwd_record = pwd.getpwnam(self.opts['user'])
        def demote():
            # don't try to set uid if you don't need it (otherwise all users of
            # rdbmanage must be sudoers).
            # FIXME catch os.OSError
            if os.getuid() != pwd_record.pw_uid:
                os.setuid(pwd_record.pw_uid)
            if os.getgid() != pwd_record.pw_gid:
                os.setgid(pwd_record.pw_gid)
        kwargs.update({
            'preexec_fn': demote,
            'stdout': subprocess.PIPE,
            'stderr': subprocess.PIPE
        })
        try:
            proc = subprocess.Popen(args, **kwargs)
            out, err = proc.communicate()
            return (proc.returncode, out, err)
        except (OSError, KeyError) as e:
            return (-1, '', str(e))

# This class is glued to the CLI. For the most part, every CLI "verb"
# corresponds to a method here. Therefore:
#
# - The state of an instance is exactly the contents of the configuration file.
# - Nothing is logged, all communications are to stdout and stdin
# - Methods corresponding to CLI commands return integers intented to be Unix
#   exit codes.
class RdbManage(object):
    def __init__(self, conf_path):
        self.conf_path = conf_path
        self.parser = ConfigParser.SafeConfigParser()
        # FIXME check if file actually exists; parser.read() does not complain
        # https://docs.python.org/2/library/configparser.html#ConfigParser.RawConfigParser.read
        self.parser.read(conf_path)
        self.job_names = [s[4:] for s in self.parser.sections() if s[:4] == 'job:']

    # returns a Job object or 1 in case of corrupt configuration file.
    def load_job(self, name):
        try:
            items = self.parser.items('job:' + name, vars={'job': name})
            opts = {k: v.replace('\n', ' ') for (k,v) in items}
            return Job(name, opts)
        except Failure, e:
            sys.stderr.write('rdbmanage: Failed to load job %s\n' % name)
            return 1
        except Exception, e:
            if e.__class__.__module__[:13] == 'ConfigParser':
                sys.stderr.write('Bad configuration file: %s\n%s' % \
                                    (self.conf_path, e))
                return 1
            else:
                raise e

    # CLI: rdbmanage -l
    # returns: 0 success, 1 corrupt config file
    def list_increments(self):
        for name in self.job_names:
            job = self.load_job(name)
            if not isinstance(job, Job): return int(job) if job else 1
            incrs = '\n  '.join([_readable_date(incr) for incr in job.incrs])
            sys.stdout.write('%s:\n  %s\t(*) current mirror\n' % (name, incrs))
        return 0

    # CLI: rdbmanage -t CHECK_JOB
    def check_job(self, name):
        job = self.load_job(name)
        if not isinstance(job, Job): return int(job) if job else 1
        try:
            job.test()
            job.email('Just testing configuration!')
            return 0
        except Failure:
            sys.stderr.write('Testing configuration for %s failed!' % name)
            return 1

    # CLI: rdbmanage -j JOB
    def update_job(self, name):
        job = self.load_job(name)
        if not isinstance(job, Job): return int(job) if job else 1
        try:
            job.test()
            job.backup(force=True)
            job.clear()
            return 0
        except Failure:
            sys.stderr.write('rdbmanage: Failed to update %s, ' % job.name +
                             'logs are at %s\n' % job.opts['logs'])
            return 1

    # updates all jobs up to a maximum number of operations; -1 means no maximum
    # returns 0 for success, 2 for failure
    # TODO test with multiple jobs some of them failing
    def update_all(self, max_ops=-1):
        fail_cnt = 0
        ops = 0
        for name in self.job_names:
            if max_ops != -1 and ops >= max_ops:
                sys.stderr.write('Hit maximum no. of %s operations, exiting.\n' % max_ops)
                break
            job = self.load_job(name)
            if not isinstance(job, Job):
                fail_cnt +=1
                continue
            try:
                job.test()
                if job.backup():
                    job.clear()
                    ops += 1
            except Failure:
                fail_cnt += 1
                sys.stderr.write('rdbmanage [job: %s] failed to update!' % name)
        return fail_cnt


def _readable_date(timestamp=None):
    fmt = "%Y-%m-%dT%H:%M:%S"
    if timestamp:
        dt = datetime.datetime.fromtimestamp(timestamp)
    else:
        dt = datetime.datetime.now()
    return dt.strftime(fmt)

# returned values are exit codes of rdbmanage:
#   0 success, 1 bad usage, 2 config not found
def main(args):
    parser = argparse.ArgumentParser(prog='rdbmanage')
    parser.add_argument('-c', dest='conf_file', action='store',
                        default=os.path.join(os.getcwd(), 'rdbmanage.conf'),
                        help='string: path to rdbmanage configuration file')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-l', dest='list_increments', action='store_true',
                        help='list increments of all jobs')
    group.add_argument('-j', dest='job', action='store',
                        help='string: job to update (backup and clear)')
    group.add_argument('-m', dest='max_ops', action='store',
                        help="""integer: maximum number of increments to fetch
                                (-1 implies no maximum), -m is ignored if -j
                                is provided.""")
    group.add_argument('-t', dest='check_job', action='store',
                        help='string: check configuration of given job')
    namespace = parser.parse_args(args)
    conf = namespace.conf_file
    if not os.path.exists(conf):
        sys.stderr.write("No such file '{}'\n".format(conf))
        return 2
    M = RdbManage(conf)
    if namespace.list_increments:
        return M.list_increments()
    elif namespace.job:
        return M.update_job(namespace.job)
    elif namespace.max_ops:
        return M.update_all(namespace.max_ops)
    elif namespace.check_job:
        return M.check_job(namespace.check_job)
    else:
        parser.print_help()
        return 2

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
